// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum Confirm {
  accept
  reject
  pending
  invalid
}

enum PaymentStatus {
  pending
  success
  failed
  invalid
}

model User {
  id          String        @id @default(uuid())
  fullname    String        @db.VarChar(255)
  email       String        @unique @db.VarChar(255)
  phone       String        @unique @db.VarChar(15)
  password    String        @db.VarChar(255)
  role        Role          @default(user)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  rental      Rental[]
  transaction Transaction[]
  Profile     Profile?
}

model Rental {
  id          String    @id @default(uuid())
  userId      String
  picture     String?
  description String    @db.VarChar(500)
  alamat      String    @db.VarChar(255)
  mapurl      String    @db.VarChar(255)
  open        String
  close       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  tv          Tv[]
  gallery     Gallery[]
}

model Tv {
  id        String   @id @default(uuid())
  user      String   @db.VarChar(255)
  time      String
  rentalId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rental    Rental   @relation(fields: [rentalId], references: [id])
}

model Gallery {
  id        String   @id @default(uuid())
  filename  String
  mimetype  String
  rentalId  String
  createdAt DateTime @default(now())
  rental    Rental   @relation(fields: [rentalId], references: [id])
}

model Transaction {
  id        String        @id @default(uuid())
  userId    String
  rentalId  String
  tvId      String
  status    PaymentStatus
  isConfirm Confirm
  date      String
  time      Json[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id])
}

model Profile {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String @unique
  picture String
  bio     String @db.VarChar(500)
}
